if(p->if_is_vertical[p->wall.i])
        { 

            y_offset = (int)p->py[p->wall.i] % TILE_SIZE;
            x_offset = 0;
            while (y <  p->wall.wall_bottom_px)
            {
                dst = p->mlx.addr + (y * p->mlx.line_length + p->wall.x * (p->mlx.bits_per_pixel / 8));
                src = p->mlx.addr_px + (y_offset * p->mlx.sl + x_offset * (p->mlx.bpp / 8));
            
                *(unsigned int*)dst =  *(unsigned int*)src;// return the px color
                
                    x_offset++;
                y++;
            }
        }
        else
        {
            x_offset = (int)p->px[p->wall.i] % TILE_SIZE;
            y_offset = 0;
            while (y <  p->wall.wall_bottom_px)
            {
                dst = p->mlx.addr + (y * p->mlx.line_length + p->wall.x * (p->mlx.bits_per_pixel / 8));
                src = p->mlx.addr_px + (y_offset * p->mlx.sl + x_offset * (p->mlx.bpp / 8));
                
                *(unsigned int*)dst =  *(unsigned int*)src;// return the px color
                 
                    y_offset++;
               y++;
            }
        }
        